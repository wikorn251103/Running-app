package com.example.myproject.Fragment.workout

import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.os.Build
import android.util.Log
import androidx.core.app.NotificationCompat
import androidx.work.CoroutineWorker
import androidx.work.WorkerParameters
import com.example.myproject.MainActivity
import com.example.myproject.R
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore
import kotlinx.coroutines.tasks.await
import java.util.Calendar

/**
 * Worker ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
 * - ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ã‡πâ‡∏≠‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 * - ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
 * - ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ ‚Üí ‡∏Ç‡∏≤‡∏î‡∏ã‡πâ‡∏≠‡∏°
 */
class WorkoutTrackerService(
    context: Context,
    params: WorkerParameters
) : CoroutineWorker(context, params) {

    private val firestore = FirebaseFirestore.getInstance()
    private val auth = FirebaseAuth.getInstance()

    companion object {
        private const val TAG = "WorkoutTrackerService"
        private const val CHANNEL_ID = "workout_reminder_channel"
        private const val NOTIFICATION_ID = 1001
    }

    override suspend fun doWork(): Result {
        Log.d(TAG, "üîî Daily workout check started")

        val userId = auth.currentUser?.uid
        if (userId == null) {
            Log.w(TAG, "‚ö†Ô∏è User not logged in")
            return Result.success()
        }

        try {
            // 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            val athleteDoc = firestore.collection("Athletes")
                .document(userId)
                .get()
                .await()

            if (!athleteDoc.exists()) {
                Log.w(TAG, "‚ö†Ô∏è No active program")
                return Result.success()
            }

            val isActive = athleteDoc.getBoolean("isActive") ?: false
            if (!isActive) {
                Log.w(TAG, "‚ö†Ô∏è Program not active")
                return Result.success()
            }

            // 2. ‡∏´‡∏≤‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ß‡∏±‡∏ô‡πÑ‡∏´‡∏ô
            val today = getTodayDayName()
            val todayDayNumber = getTodayDayNumber()

            Log.d(TAG, "üìÖ Today is: $today (Day $todayDayNumber)")

            // 3. ‡∏´‡∏≤‡∏ß‡πà‡∏≤‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡πÑ‡∏´‡∏ô (‡∏à‡∏≤‡∏Å createdAt)
            val createdAt = athleteDoc.getLong("createdAt") ?: System.currentTimeMillis()
            val currentWeek = calculateCurrentWeek(createdAt)

            Log.d(TAG, "üìä Current week: $currentWeek")

            // 4. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á
            val weeks = athleteDoc.get("weeks") as? Map<*, *>
            val weekData = weeks?.get("week$currentWeek") as? Map<*, *>
            val todayData = weekData?.get("day$todayDayNumber") as? Map<*, *>

            if (todayData == null) {
                Log.d(TAG, "‚ÑπÔ∏è No training scheduled for today")
                return Result.success()
            }

            // 5. ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
            val isCompleted = todayData["isCompleted"] as? Boolean ?: false
            val isMissed = todayData["isMissed"] as? Boolean ?: false

            if (isCompleted) {
                Log.d(TAG, "‚úÖ Already completed today")
                return Result.success()
            }

            if (isMissed) {
                Log.d(TAG, "‚ùå Already marked as missed")
                return Result.success()
            }

            // 6. ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏ß‡∏•‡∏≤ - ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡∏Ç‡∏≤‡∏î‡∏ã‡πâ‡∏≠‡∏°
            val currentHour = Calendar.getInstance().get(Calendar.HOUR_OF_DAY)

            if (currentHour >= 23) {
                // ‡πÄ‡∏Å‡∏∑‡∏≠‡∏ö‡∏´‡∏°‡∏î‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ‚Üí ‡∏Ç‡∏≤‡∏î‡∏ã‡πâ‡∏≠‡∏°
                markAsMissed(userId, currentWeek, todayDayNumber)
                Log.d(TAG, "‚ùå Marked as missed - past deadline")
                return Result.success()
            }

            // 7. ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ ‚Üí ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
            val trainingType = todayData["type"] as? String ?: "‡∏ã‡πâ‡∏≠‡∏°"
            val description = todayData["description"] as? String ?: ""

            sendReminderNotification(trainingType, description)
            Log.d(TAG, "üîî Reminder sent")

            return Result.success()

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error in workout tracker", e)
            return Result.failure()
        }
    }

    /**
     * ‡∏´‡∏≤‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ß‡∏±‡∏ô‡∏≠‡∏∞‡πÑ‡∏£ (Monday, Tuesday, ...)
     */
    private fun getTodayDayName(): String {
        val calendar = Calendar.getInstance()
        return when (calendar.get(Calendar.DAY_OF_WEEK)) {
            Calendar.MONDAY -> "Monday"
            Calendar.TUESDAY -> "Tuesday"
            Calendar.WEDNESDAY -> "Wednesday"
            Calendar.THURSDAY -> "Thursday"
            Calendar.FRIDAY -> "Friday"
            Calendar.SATURDAY -> "Saturday"
            Calendar.SUNDAY -> "Sunday"
            else -> ""
        }
    }

    /**
     * ‡∏´‡∏≤‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå (1-7)
     */
    private fun getTodayDayNumber(): Int {
        val calendar = Calendar.getInstance()
        return when (calendar.get(Calendar.DAY_OF_WEEK)) {
            Calendar.MONDAY -> 1
            Calendar.TUESDAY -> 2
            Calendar.WEDNESDAY -> 3
            Calendar.THURSDAY -> 4
            Calendar.FRIDAY -> 5
            Calendar.SATURDAY -> 6
            Calendar.SUNDAY -> 7
            else -> 1
        }
    }

    /**
     * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡πà‡∏≤‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡πÑ‡∏´‡∏ô
     */
    private fun calculateCurrentWeek(programStartTime: Long): Int {
        val now = System.currentTimeMillis()
        val daysPassed = ((now - programStartTime) / (1000 * 60 * 60 * 24)).toInt()
        val weeksPassed = daysPassed / 7
        return (weeksPassed + 1).coerceIn(1, 4) // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå 1-4
    }

    /**
     * ‚≠ê ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏Ç‡∏≤‡∏î‡∏ã‡πâ‡∏≠‡∏°
     */
    private suspend fun markAsMissed(userId: String, weekNumber: Int, dayNumber: Int) {
        try {
            val fieldPath = "weeks.week$weekNumber.day$dayNumber.isMissed"

            firestore.collection("Athletes")
                .document(userId)
                .update(fieldPath, true)
                .await()

            Log.d(TAG, "‚úÖ Marked as missed: Week $weekNumber, Day $dayNumber")

            // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏Ç‡∏≤‡∏î‡∏ã‡πâ‡∏≠‡∏°
            sendMissedNotification()

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Failed to mark as missed", e)
        }
    }

    /**
     * üîî ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°
     */
    private fun sendReminderNotification(trainingType: String, description: String) {
        createNotificationChannel()

        val intent = Intent(applicationContext, MainActivity::class.java).apply {
            flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
        }

        val pendingIntent = PendingIntent.getActivity(
            applicationContext,
            0,
            intent,
            PendingIntent.FLAG_IMMUTABLE or PendingIntent.FLAG_UPDATE_CURRENT
        )

        val notification = NotificationCompat.Builder(applicationContext, CHANNEL_ID)
            .setSmallIcon(R.drawable.ic_notification)
            .setContentTitle("‚è∞ ‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ã‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß!")
            .setContentText("$trainingType: $description")
            .setStyle(NotificationCompat.BigTextStyle()
                .bigText("‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ã‡πâ‡∏≠‡∏° $trainingType\n$description\n\n‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö!"))
            .setPriority(NotificationCompat.PRIORITY_HIGH)
            .setAutoCancel(true)
            .setContentIntent(pendingIntent)
            .build()

        val notificationManager = applicationContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        notificationManager.notify(NOTIFICATION_ID, notification)
    }

    /**
     * üîî ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏Ç‡∏≤‡∏î‡∏ã‡πâ‡∏≠‡∏°
     */
    private fun sendMissedNotification() {
        createNotificationChannel()

        val notification = NotificationCompat.Builder(applicationContext, CHANNEL_ID)
            .setSmallIcon(R.drawable.ic_notification)
            .setContentTitle("‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏Ç‡∏≤‡∏î‡∏ã‡πâ‡∏≠‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô")
            .setContentText("‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏ã‡πâ‡∏≠‡∏°‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö!")
            .setPriority(NotificationCompat.PRIORITY_DEFAULT)
            .setAutoCancel(true)
            .build()

        val notificationManager = applicationContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        notificationManager.notify(NOTIFICATION_ID + 1, notification)
    }

    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á Notification Channel (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Android 8.0+)
     */
    private fun createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val name = "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°"
            val descriptionText = "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ã‡πâ‡∏≠‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ç‡∏≤‡∏î‡∏ã‡πâ‡∏≠‡∏°"
            val importance = NotificationManager.IMPORTANCE_HIGH
            val channel = NotificationChannel(CHANNEL_ID, name, importance).apply {
                description = descriptionText
            }

            val notificationManager = applicationContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
            notificationManager.createNotificationChannel(channel)
        }
    }
}