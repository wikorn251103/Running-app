package com.example.myproject.Fragment.workout

import android.content.Context
import android.util.Log
import androidx.work.*
import java.util.Calendar
import java.util.concurrent.TimeUnit

/**
 * ‚≠ê ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
 */
object WorkoutScheduler {

    private const val TAG = "WorkoutScheduler"
    private const val WORK_NAME = "daily_workout_check"

    /**
     * ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Daily Checker
     * - ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 09:00 ‡∏ô. (‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å)
     * - ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 23:00 ‡∏ô. (‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ‚Üí ‡∏Ç‡∏≤‡∏î‡∏ã‡πâ‡∏≠‡∏°)
     */
    fun scheduleDailyCheck(context: Context) {
        // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å schedule ‡πÄ‡∏Å‡πà‡∏≤
        WorkManager.getInstance(context).cancelUniqueWork(WORK_NAME)

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å (‡πÄ‡∏ä‡πâ‡∏≤ 9 ‡πÇ‡∏°‡∏á)
        val currentTime = Calendar.getInstance()
        val targetTime = Calendar.getInstance().apply {
            set(Calendar.HOUR_OF_DAY, 9)
            set(Calendar.MINUTE, 0)
            set(Calendar.SECOND, 0)

            // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 9 ‡πÇ‡∏°‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ô‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ
            if (before(currentTime)) {
                add(Calendar.DAY_OF_YEAR, 1)
            }
        }

        val initialDelay = targetTime.timeInMillis - currentTime.timeInMillis

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á PeriodicWorkRequest (‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å 12 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
        val workRequest = PeriodicWorkRequestBuilder<WorkoutTrackerService>(
            12, TimeUnit.HOURS // ‡πÄ‡∏ä‡πá‡∏Ñ 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô (9:00 ‡πÅ‡∏•‡∏∞ 21:00)
        )
            .setInitialDelay(initialDelay, TimeUnit.MILLISECONDS)
            .setConstraints(
                Constraints.Builder()
                    .setRequiredNetworkType(NetworkType.CONNECTED) // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ Internet
                    .build()
            )
            .addTag("workout_reminder")
            .build()

        // Schedule
        WorkManager.getInstance(context).enqueueUniquePeriodicWork(
            WORK_NAME,
            ExistingPeriodicWorkPolicy.REPLACE,
            workRequest
        )

        Log.d(TAG, "‚úÖ Daily workout check scheduled (every 12 hours)")
    }

    /**
     * ‡∏´‡∏¢‡∏∏‡∏î Daily Checker
     */
    fun cancelDailyCheck(context: Context) {
        WorkManager.getInstance(context).cancelUniqueWork(WORK_NAME)
        Log.d(TAG, "‚ùå Daily workout check cancelled")
    }

    /**
     * ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Testing)
     */
    fun runImmediateCheck(context: Context) {
        val workRequest = OneTimeWorkRequestBuilder<WorkoutTrackerService>()
            .setConstraints(
                Constraints.Builder()
                    .setRequiredNetworkType(NetworkType.CONNECTED)
                    .build()
            )
            .build()

        WorkManager.getInstance(context).enqueue(workRequest)
        Log.d(TAG, "üîÑ Immediate check triggered")
    }
}