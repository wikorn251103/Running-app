package com.example.myproject.data.training

import android.util.Log
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore
import com.google.firebase.firestore.ListenerRegistration
import kotlinx.coroutines.tasks.await

class TrainingRepository(private val firestore: FirebaseFirestore) {

    private val auth = FirebaseAuth.getInstance()
    private var weekListener: ListenerRegistration? = null

    companion object {
        private const val TAG = "TrainingRepository"
    }

    /**
     * ‚≠ê ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö Real-time ‡∏à‡∏≤‡∏Å Athletes/{userId}
     */
    fun getTrainingWeekDataRealtime(
        week: Int,
        onSuccess: (List<TrainingModel>) -> Unit,
        onFailure: (Exception) -> Unit
    ): ListenerRegistration? {
        val userId = auth.currentUser?.uid
        if (userId == null) {
            onFailure(Exception("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ Login ‡∏Å‡πà‡∏≠‡∏ô"))
            return null
        }

        Log.d(TAG, "üîÑ Setting up real-time listener for week $week")

        // ‚úÖ ‡πÉ‡∏ä‡πâ addSnapshotListener ‡πÅ‡∏ó‡∏ô get()
        weekListener = firestore.collection("Athletes")
            .document(userId)
            .addSnapshotListener { snapshot, error ->
                if (error != null) {
                    Log.e(TAG, "‚ùå Listener error: ${error.message}", error)
                    onFailure(error)
                    return@addSnapshotListener
                }

                if (snapshot != null && snapshot.exists()) {
                    val weekData = snapshot.get("week_$week") as? HashMap<*, *>

                    if (weekData == null) {
                        onFailure(Exception("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà $week"))
                        return@addSnapshotListener
                    }

                    val trainingDays = mutableListOf<TrainingModel>()

                    for (i in 1..7) {
                        val dayData = weekData["day_$i"] as? HashMap<*, *>
                        dayData?.let {
                            val trainingDay = TrainingModel(
                                day = i.toString(),
                                description = it["description"] as? String ?: "",
                                pace = it["pace"] as? String ?: "",
                                type = it["type"] as? String ?: "",
                                isCompleted = it["isCompleted"] as? Boolean ?: false // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°
                            )
                            trainingDays.add(trainingDay)
                        }
                    }

                    Log.d(TAG, "‚úÖ Real-time update received: ${trainingDays.size} days")
                    onSuccess(trainingDays)
                } else {
                    onFailure(Exception("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"))
                }
            }

        return weekListener
    }

    /**
     * ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å Listener ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
     */
    fun removeListener() {
        weekListener?.remove()
        weekListener = null
        Log.d(TAG, "üîï Listener removed")
    }

    /**
     * ‡πÄ‡∏Å‡πà‡∏≤ - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥ (‡πÑ‡∏°‡πà real-time)
     */
    fun getTrainingWeekData(
        planId: String,
        week: Int,
        onSuccess: (List<TrainingModel>) -> Unit,
        onFailure: (Exception) -> Unit
    ) {
        val userId = auth.currentUser?.uid
        if (userId == null) {
            onFailure(Exception("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ Login ‡∏Å‡πà‡∏≠‡∏ô"))
            return
        }

        firestore.collection("Athletes")
            .document(userId)
            .get()
            .addOnSuccessListener { document ->
                if (document.exists()) {
                    val weekData = document.get("week_$week") as? HashMap<*, *>

                    if (weekData == null) {
                        onFailure(Exception("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà $week"))
                        return@addOnSuccessListener
                    }

                    val trainingDays = mutableListOf<TrainingModel>()

                    for (i in 1..7) {
                        val dayData = weekData["day_$i"] as? HashMap<*, *>
                        dayData?.let {
                            val trainingDay = TrainingModel(
                                day = i.toString(),
                                description = it["description"] as? String ?: "",
                                pace = it["pace"] as? String ?: "",
                                type = it["type"] as? String ?: "",
                                isCompleted = it["isCompleted"] as? Boolean ?: false
                            )
                            trainingDays.add(trainingDay)
                        }
                    }
                    onSuccess(trainingDays)
                } else {
                    onFailure(Exception("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Å‡πà‡∏≠‡∏ô"))
                }
            }
            .addOnFailureListener { exception ->
                onFailure(exception)
            }
    }
}